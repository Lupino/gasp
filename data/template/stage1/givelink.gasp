{{={= =}=}}
{=# has_app =}
import <givelink_raw.h> https://github.com/Lupino/givelink.git
import <jsmn.h> https://github.com/zserge/jsmn.git
{=/ has_app =}

packet_sended bool = true;

func givelink_reader(c uint8_t, buffer uint8_t *, len int *) bool {
    return givelink_raw_recv(buffer, (uint16_t *)len, c);
}

func GL_SERIAL_parse(buffer const uint8_t *, len const int) {
    givelink_type = givelink_raw_get_type(buffer);
    givelink_id = givelink_raw_get_id(buffer);
    givelink_raw_get_data(buffer, {= PACKET_DATA =}, &{= PACKET_DATA_LENGTH =});
    {= PACKET_DATA =}[{= PACKET_DATA_LENGTH =}] = '\0';
    {=# ctrl_mode =}
    packet_sended = false;
    {=/ ctrl_mode =}
    if (givelink_type == AUTHRES) {
        for (int i = 0; i < PACKET_ADDR_LENGTH; i ++) {
            givelink_addr[i] = {= PACKET_DATA =}[i];
        }
        givelink_authed = true;

        {=# ctrl_mode =}
        save_addr();
        {=/ ctrl_mode =}
        {=# low_memory =}
        incrLastPayloadId();
        {=/ low_memory =}
        return;
    }
    if (givelink_type == GETSETTOKEN) {
        {=# production =}
        if ({= PACKET_DATA_LENGTH =} > 0) {
            save_token();
        }
        {=/ production =}
        send_token();
        return;
    }
    if (givelink_type == REQUEST || givelink_type == REQUEST1) {
        wantSendData[0] = '\0';
        bool ret = processRequest((const char *){= PACKET_DATA =}, {= PACKET_DATA_LENGTH =}, wantSendData);
        if (wantSendData[0] == '\0') {
            if (ret) {
                sprintf(wantSendData, {= FROM_ROM =}({= TO_ROM =}("{\"result\": \"OK\"}")));
            } else {
                sprintf(wantSendData, {= FROM_ROM =}({= TO_ROM =}("{\"err\": \"not support\"}")));
            }
        }
        if (givelink_type == REQUEST) {
            send_packet_rsp(RESPONSE, wantSendData);
        } else {
            send_packet_rsp(RESPONSE1, wantSendData);
        }
        return;
    }
    if (givelink_type == SUCCESS) {
        if (lastPayloadId == ping_packet_id) {
            ping_timer_ms = get_cache_time_ms();
            {=# low_memory =}
            incrLastPayloadId();
            {=/ low_memory =}
            report_timer_ms = 0;
        }
        {=^ low_memory =}
        {=# auto_retry =}
        {=# ctrl_mode =}
        if (lastPayloadId == report_attr_packet_id) {
            need_retry = false;
        }
        if (lastPayloadId == report_metric_packet_id) {
            need_retry = false;
        }
        {=/ ctrl_mode =}
        {=^ ctrl_mode =}
        need_retry = false;
        {=/ ctrl_mode =}
        {=/ auto_retry =}
        {=/ low_memory =}
        {=# low_memory =}
        if (lastPayloadId == report_attr_packet_id) {
            doneReportAttribute();
            incrLastPayloadId();
            report_timer_ms = 0;
        }
        {=# has_metric =}
        if (lastPayloadId == report_metric_packet_id) {
            doneReportMetric();
            incrLastPayloadId();
            report_timer_ms = 0;
        }
        {=/ has_metric =}
        {=/ low_memory =}
        return;
    }
    {=# has_timer =}
    if (givelink_type == SYNCTIME) {
        sys_timer_s = (uint32_t)atol((const char *){= PACKET_DATA =});
        sys_timer_synced_ms = get_cache_time_ms();
        return;
    }
    {=/ has_timer =}
    {=# ctrl_mode =}
    if (givelink_type == CTRLREQ) {
        mainAction();
        send_packet_0(CTRLRES);
        return;
    }
    if (givelink_type == CTRLREQ1) {
        mainAction();
        if (report_timer_ms + {= REPORT_DELAY_MS =} < get_cache_time_ms()) {
            send_packet_0(PING);
        }
        send_packet_0(CTRLRES);
        return;
    }
    {=/ ctrl_mode =}
}

func GL_SERIAL_main {
    if (!givelink_authed) {
        requireReportAttribute = true;
        if (auth_timer_ms + {= AUTH_DELAY_MS =} < get_cache_time_ms()) {
            {=# ctrl_mode =}
            packet_sended = false;
            {=/ ctrl_mode =}
            send_packet_0(AUTHREQ);
            auth_timer_ms = get_cache_time_ms();
        }
    {=^ ctrl_mode =}
    } else {
        mainAction();
    {=/ ctrl_mode =}
    }
}

auth_timer_ms unsigned long = 0

MAX_GL_PAYLOAD_LENGTH = {= max_gl_len =}
MAX_BUFFER_LENGTH = {= max_buf_len =}
MAX_REQUEST_VALUE_LENGTH = {= max_req_len =}
MAX_TMPL_LENGTH = {= max_tpl_len =}

ping_timer_ms  unsigned long = 0
ping_packet_id uint16_t = 0

{=# app =}
key[{= key_len =}] const uint8_t = {{= key_hex_array =}}
{=# production =}
token[{= token_len =}] uint8_t
givelink_addr[PACKET_ADDR_LENGTH] uint8_t
{=/ production =}
{=^ production =}
token[{= token_len =}] const uint8_t = {{= token_hex_array =}}
givelink_addr[PACKET_ADDR_LENGTH] uint8_t = {{= addr_hex_array =}}
{=/ production =}

func load_addr() {
    for (int i = 0; i < PACKET_ADDR_LENGTH; i ++) {
        givelink_addr[i] = {= STROAGE_READ =}({= addr_addr =} + i);
    }
    givelink_authed = true;
}

func setup_givelink {
    {=# production =}
    for (int i = 0; i < {= token_len =}; i ++) {
        token[i] = {= STROAGE_READ =}({= token_addr =} + i);
    }
    {=/ production =}
    {=# production =}
    {=# ctrl_mode =}
    load_addr();
    {=/ ctrl_mode =}
    {=/ production =}
}

setup setup_givelink {
    setup_givelink();
}

func save_addr {
    {=# production =}
    for (int i = 0; i < PACKET_ADDR_LENGTH; i ++) {
        {= STROAGE_WRITE =}({= addr_addr =} + i, {= PACKET_DATA =}[i]);
    }
    {= STROAGE_COMMIT =}();
    {=/ production =}
}

func save_token {
    for (int i = 0; i < {= token_len =}; i ++) {
        {= STROAGE_WRITE =}({= token_addr =} + i, {= PACKET_DATA =}[i]);
    }
    {= STROAGE_COMMIT =}();
    setup_givelink();
}


func send_token() {
    int idx = 0;
    uint8_t *buf = (uint8_t *) wantSendData;
    buf[idx] = {= key_len =};
    idx ++;
    for (int i = 0; i < {= key_len =}; i ++) {
        buf[idx] = key[i];
        idx ++;
    }
    buf[idx] = {= token_len =};
    idx ++;
    for (int i = 0; i < {= token_len =}; i ++) {
        buf[idx] = token[i];
        idx ++;
    }

    givelink_type = GETSETTOKEN;
    memcpy({= PACKET_DATA =}, buf, idx);
    {= PACKET_DATA_LENGTH =} = idx;
    send_packet();
}
{=/ app =}

givelink_authed bool = true
givelink_type uint8_t
packet_data[MAX_BUFFER_LENGTH] uint8_t
packet_data_length uint16_t
givelink_id uint16_t

lastPayloadId uint16_t = 100
readedPayload[MAX_GL_PAYLOAD_LENGTH] uint8_t
report_attr_packet_id uint16_t = 0
report_metric_packet_id uint16_t = 0
report_timer_ms unsigned long = 4000
sendedPayload[MAX_GL_PAYLOAD_LENGTH] uint8_t
retryPayload[MAX_GL_PAYLOAD_LENGTH] uint8_t
retryLen uint16_t = 0
need_retry bool = false


requestJsmnParser jsmn_parser
requestJsmnTokens[{= MAX_NUM_TOKENS =}] jsmntok_t
requestValue[MAX_REQUEST_VALUE_LENGTH] char
wantSendData[MAX_BUFFER_LENGTH] char
tempSendData[MAX_TMPL_LENGTH] char
wantSendDataTpl[MAX_TMPL_LENGTH] char

metric_timer_ms unsigned long = 0
requireReportAttribute bool = true
requireReportMetric bool = true


func mainAction() void {
    if (report_timer_ms + {= REPORT_DELAY_MS =} > get_cache_time_ms()) {
        return;
    }

    {=# low_memory =}
    if (!reportAttribute()) {
        return;
    }

    {=# has_metric =}
    if (reportMetric()) {
        if (metric_timer_ms + {= METRIC_DELAY_MS =} < get_cache_time_ms()) {
            setReportMetricAll();
        }
    } else {
        metric_timer_ms = get_cache_time_ms();
        return;
    }

    {=/ has_metric =}
    {=/ low_memory =}
    {=^ low_memory =}
    {=# auto_retry =}
    if (need_retry) {
        report_timer_ms = get_cache_time_ms();
        send_packet_raw(retryPayload, retryLen);
        return;
    }

    {=/ auto_retry =}
    if (reportAttribute(requireReportAttribute)) {
        requireReportAttribute = false;
        return;
    }

    {=# has_metric =}
    if (metric_timer_ms + {= METRIC_DELAY_MS =} < get_cache_time_ms()) {
        requireReportMetric = true;
    }

    if (reportMetric(requireReportMetric)) {
        metric_timer_ms = get_cache_time_ms();
        requireReportMetric = false;
        return;
    }

    {=/ has_metric =}
    {=/ low_memory =}
    if (ping_timer_ms + {= PING_DELAY_MS =} < get_cache_time_ms()) {
        send_packet_0(PING);
    }

    {=# has_timer =}
    if (sys_timer_s < 1000) {
        send_packet_0(SYNCTIME);
    }

    if (sys_timer_synced_ms + {= SYNCTIME_DELAY_MS =} < get_cache_time_ms()) {
        send_packet_0(SYNCTIME);
    }
    {=/ has_timer =}
}

serial_fd int = 0

func send_packet_raw(buffer const uint8_t *, len const uint16_t) void {
    delay(5);
    {= GL_SERIAL_EVENT =}(buffer, len, false);
    {=# fds =}
    if (serial_fd == {= fd =}) {
        {= call =}.write(buffer, len);
        return;
    }
    {=/ fds =}
    GL_SERIAL.write(buffer, len);
}


func gen_packet(pkt uint8_t *) {
    givelink_raw_set_magic(pkt);
    if (givelink_authed) {
        givelink_raw_set_key(pkt, givelink_addr, PACKET_ADDR_LENGTH);
        givelink_raw_set_token(pkt, NULL, 0);
    } else {
        {=# app =}
        givelink_raw_set_key(pkt, key, {= key_len =});
        givelink_raw_set_token(pkt, token, {= token_len =});
        {=/ app =}
    }
    givelink_raw_set_id(pkt, givelink_id);
    givelink_raw_set_type(pkt, givelink_type);
    givelink_raw_set_data(pkt, {= PACKET_DATA =}, {= PACKET_DATA_LENGTH =});
    givelink_raw_set_crc16(pkt);
}

func is_self(buffer const uint8_t *, len const int) bool {
    givelink_raw_get_key(buffer, {= PACKET_DATA =}, &{= PACKET_DATA_LENGTH =});

    if ({= PACKET_DATA_LENGTH =} == 0) {
        givelink_raw_get_token(buffer, {= PACKET_DATA =}, &{= PACKET_DATA_LENGTH =});
        if ({= PACKET_DATA_LENGTH =} == 0) {
            return true;
        }
    }

    if ({= PACKET_DATA_LENGTH =} == PACKET_ADDR_LENGTH && equal({= PACKET_DATA =}, givelink_addr, {= PACKET_DATA_LENGTH =})) {
        return true;
    }

    {=# app =}
    if ({= PACKET_DATA_LENGTH =} == {= key_len =} && equal({= PACKET_DATA =}, key, {= PACKET_DATA_LENGTH =})) {
        givelink_raw_get_token(buffer, {= PACKET_DATA =}, &{= PACKET_DATA_LENGTH =});
        if ({= PACKET_DATA_LENGTH =} == {= token_len =} && equal({= PACKET_DATA =}, token, {= PACKET_DATA_LENGTH =})) {
            return true;
        }
    }
    {=/ app =}

    return false;
}

func send_packet() void {
    {=# ctrl_mode =}
    if (packet_sended) {
        return;
    }
    packet_sended = true;
    {=/ ctrl_mode =}
    {=# low_memory =}
    gen_packet({= READED_PAYLOAD =});
    send_packet_raw({= READED_PAYLOAD =}, givelink_raw_get_length({= READED_PAYLOAD =}));
    {=/ low_memory =}
    {=^ low_memory =}
    {=# auto_retry =}
    if (givelink_type == ATTRIBUTE || givelink_type == TELEMETRY) {
        gen_packet(retryPayload);
        retryLen = givelink_raw_get_length(retryPayload);
        need_retry = true;

        send_packet_raw(retryPayload, retryLen);
    } else {
        gen_packet(sendedPayload);
        send_packet_raw(sendedPayload, givelink_raw_get_length(sendedPayload));
    }
    {=/ auto_retry =}
    {=^ auto_retry =}
    gen_packet(sendedPayload);
    send_packet_raw(sendedPayload, givelink_raw_get_length(sendedPayload));
    {=/ auto_retry =}
    {=/ low_memory =}
}

func send_packet_0(type const uint8_t) void {
    next_packet(type);
    send_packet();
}

func send_packet_1(type const uint8_t, data_ const char *, length const int) void {
    next_packet(type);
    {= PACKET_DATA_LENGTH =} = length;
    memcpy({= PACKET_DATA =}, data_, length);
    send_packet();
}

func send_packet_rsp(type const uint8_t, data_ const char *) void {
    givelink_type = type;
    {= PACKET_DATA_LENGTH =} = get_json_length(data_);
    memcpy({= PACKET_DATA =}, (const uint8_t *)data_, {= PACKET_DATA_LENGTH =});
    send_packet();
}

func next_packet(type const uint8_t) void {
    if (type == PING) {
        ping_packet_id = lastPayloadId;
        report_timer_ms = get_cache_time_ms();
    }

    if (type == ATTRIBUTE) {
        report_attr_packet_id = lastPayloadId;
        report_timer_ms = get_cache_time_ms();
    }

    if (type == TELEMETRY) {
        report_metric_packet_id = lastPayloadId;
        report_timer_ms = get_cache_time_ms();
    }

    {=# has_timer =}
    if (type == SYNCTIME) {
        report_timer_ms = get_cache_time_ms();
    }
    {=/ has_timer =}

    givelink_id = lastPayloadId;
    givelink_type = type;
    {= PACKET_DATA_LENGTH =} = 0;
    {=^ low_memory =}
    incrLastPayloadId();
    {=/ low_memory =}
}

func incrLastPayloadId() {
    lastPayloadId ++;
}

func processRequest(json const char *, length int, retval char *) bool {
    /* Prepare parser */
    jsmn_init(&requestJsmnParser);
    int num_tokens = jsmn_parse(&requestJsmnParser, json, length, requestJsmnTokens, {= MAX_NUM_TOKENS =});

    if (num_tokens < 0) {
        sprintf(retval, {= FROM_ROM =}({= TO_ROM =}("{\"err\": \"Failed to parse JSON: %d\"}")), num_tokens);
        return false;
    }

    int token = jsonfind(json, requestJsmnTokens, num_tokens, "method");

    if (token > 1) {
        {=# commands =}
        if (jsoneq(json, &requestJsmnTokens[token], {= FROM_ROM =}({= TO_ROM =}("{= name =}")))) {
            if ({= fn =}({=# argv =}{= name =}{=^ last =}, {=/ last =}{=/ argv =})) {
                return true;
            } else {
                {=# error =}
                sprintf(retval, {= FROM_ROM =}({= TO_ROM =}("{\"err\": \"{= error =}\"}")));
                {=/ error =}
                return false;
            }
        }
        {=/ commands =}
    }
    return false;
}

