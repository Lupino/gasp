{{={= =}=}}

unused_xxxxxxx_xxxx unsigned long

{=# metrics =}
metric_{= name =} {= type =} = 0
cache_metric_{= name =} {= type =} = 0
last_metric_{= name =} {= type =} = 0
metric_{= name =}_reported bool = true
metric_{= name =}_readed bool = false

{=# auto =}
metric_{= name =}_threshold {= type =} = {= threshold =}
cache_metric_{= name =}_threshold {= type =} = {= threshold =}
last_metric_{= name =}_threshold {= type =} = {= threshold =}
metric_{= name =}_threshold_force bool = true
metric_{= name =}_threshold_reported bool = false

{=# has_app =}
setup setup_metric_{= name =} {
    {=# onebyte =}
    metric_{= name =}_threshold = {= STROAGE_READ =}({= addr =});
    {=/ onebyte =}
    {=^ onebyte =}
    {= STROAGE_GET =}({= addr =}, metric_{= name =}_threshold);
    {=/ onebyte =}
    {=# is_float =}
    if (!is_valid_float(metric_{= name =}_threshold, {= min_threshold =}, {= max_threshold =})) {
    {=/ is_float =}
    {=^ is_float =}
    {=# uncheckmin =}
    if (metric_{= name =}_threshold > {= max_threshold =}) {
    {=/ uncheckmin =}
    {=^ uncheckmin =}
    if (metric_{= name =}_threshold < {= min_threshold =} || metric_{= name =}_threshold > {= max_threshold =}) {
    {=/ uncheckmin =}
    {=/ is_float =}
        metric_{= name =}_threshold = {= threshold =};
    }
}
{=/ has_app =}

func set_metric_{= name =}_threshold(json const char *, toks jsmntok_t *, num_toks int, retval char *) bool {
    if (jsonlookup(json, toks, num_toks, {= FROM_ROM =}({= TO_ROM =}("data")), requestValue)) {
        {=# is_float =}
        float tmp;
        bool r = prepare_float(&tmp, retval, requestValue, {= min_threshold =}, {= max_threshold =});
        {=/ is_float =}
        {=^ is_float =}
        long tmp;
        bool r = prepare_long(&tmp, retval, requestValue, {= min_threshold =}, {= max_threshold =});
        {=/ is_float =}
        if (!r) {
            return false;
        }
        metric_{= name =}_threshold = ({= type =})tmp;
        metric_{= name =}_threshold_force = true;
        {=# onebyte =}
        {= STROAGE_WRITE =}({= addr =}, metric_{= name =}_threshold);
        {=/ onebyte =}
        {=^ onebyte =}
        {= STROAGE_PUT =}({= addr =}, metric_{= name =}_threshold);
        {=/ onebyte =}
        {= STROAGE_COMMIT =}();
    }
    get_metric_{= name =}_threshold(retval);
    return true;
}

func get_metric_{= name =}_threshold(retval char *) bool {
    {=^ is_float =}
    {=# is_long =}
    sprintf(retval, {= FROM_ROM =}({= TO_ROM =}("{\"{= name =}_threshold\": %ld}")), metric_{= name =}_threshold);
    {=/ is_long =}
    {=^ is_long =}
    sprintf(retval, {= FROM_ROM =}({= TO_ROM =}("{\"{= name =}_threshold\": %d}")), metric_{= name =}_threshold);
    {=/ is_long =}
    {=/ is_float =}
    {=# is_float =}
    dtostrf(metric_{= name =}_threshold, {= width =}, {= prec =}, requestValue);
    sprintf(retval, {= FROM_ROM =}({= TO_ROM =}("{\"{= name =}_threshold\": %s}")), ltrim(requestValue));
    {=/ is_float =}
    return true;
}

{=/ auto =}
func check_metric_{= name =}() bool {
    {=# is_float =}
    return is_valid_float(metric_{= name =}, {= min =}, {= max =});
    {=/ is_float =}
    {=^ is_float =}
    return metric_{= name =} >= {= min =} && metric_{= name =} <= {= max =};
    {=/ is_float =}
}

func get_metric_{= name =}(retval char *) bool {
    if (!check_metric_{= name =}()) {
        return err_invalid(retval);
    }
    {=^ is_float =}
    {=# is_long =}
    sprintf(retval, {= FROM_ROM =}({= TO_ROM =}("{\"{= name =}\": %ld}")), metric_{= name =});
    {=/ is_long =}
    {=^ is_long =}
    sprintf(retval, {= FROM_ROM =}({= TO_ROM =}("{\"{= name =}\": %d}")), metric_{= name =});
    {=/ is_long =}
    {=/ is_float =}
    {=# is_float =}
    dtostrf(metric_{= name =}, {= width =}, {= prec =}, requestValue);
    sprintf(retval, {= FROM_ROM =}({= TO_ROM =}("{\"{= name =}\": %s}")), ltrim(requestValue));
    {=/ is_float =}
    return true;
}

func set_metric_{= name =}_readed() {
    metric_{= name =}_readed = true;
}

{=# auto =}
command set_{= name =}_threshold {
  fn: set_metric_{= name =}_threshold,
  docs: {
    name: "set_{= name =}_threshold",
    command: {
      docs: [
      - data is between [{= min_threshold =}, {= max_threshold =}]
      ],
      payload: {
        method: set_{= name =}_threshold
        data: {= threshold =}
      }
    },
    return: {
      docs: [
      - {= name =}_threshold is between [{= min_threshold =}, {= max_threshold =}]
      ],
      payload: {
        {= name =}_threshold: {= threshold =}
      }
    },
    error: {
      payload: {
        err: "data must between: [{= min_threshold =}, {= max_threshold =}]"
      }
    }
  }
}
command get_{= name =}_threshold {
  fn: get_metric_{= name =}_threshold,
  docs: {
    name: "get_{= name =}_threshold",
    command: {
      payload: {
        method: get_{= name =}_threshold
      }
    },
    return: {
      docs: [
      - {= name =}_threshold is between [{= min_threshold =}, {= max_threshold =}]
      ],
      payload: {
        {= name =}_threshold: {= threshold =}
      }
    }
  }
}
{=/ auto =}
command get_{= name =} {
  fn: get_metric_{= name =},
  docs: {
    name: "get_{= name =}",
    command: {
      payload: {
        method: get_{= name =}
      }
    },
    return: {
      docs: [
      - {= name =} is between [{= min =}, {= max =}]
      ],
      payload: {
        {= name =}: {= min =}
      }
    },
    error: {
      payload: {
        err: "{= name =} is inviald"
      }
    }
  }
}

{=/ metrics =}
