{{={= =}=}}

sys_timer_s         uint32_t = 0
sys_timer_synced_ms uint32_t = 0
next_timer_event_ms uint32_t = 0
timer_delta0_ms     uint32_t = 0
timer_delta1_ms     uint32_t = 0
timer_schedat_s     uint32_t = 0
timer_period_s      uint32_t = 0
timer_duration_s    uint32_t = 0
timer_action uint8_t = 0

{=# timers =}
timer_{= name =}_sched bool = false
{=/ timers =}

{=# has_timer =}
loop timer_loop {
    if (sys_timer_s > 0 && next_timer_event_ms <= get_cache_time_ms()) {
        {=# timers =}
        processTimer({= addr0 =}, {= addr1 =}, {= addr2 =}, &timer_{= name =}_sched);
        if (timer_action == 1) {
            {= fn0 =}();
        } else if (timer_action == 2) {
            {= fn1 =}();
        }

        {=/ timers =}
        if (next_timer_event_ms < get_cache_time_ms()) {
            next_timer_event_ms += 60000;
        }
    }
}

func set_timer(json const char *, tokens jsmntok_t *, num_tokens int, retval char *) bool {
    return getset_timer(json, tokens, num_tokens, retval, true);
}

command set_timer {
  fn: set_timer,
  docs: {
    name: "set_timer",
    command: {
      docs: [
        - name is one of [{=# timers =}{= name =} {=/ timers =}]
        - data format is schedat,period,duration
        - schedat is int unix timestamp
        - period is int
        - duration is int
      ],
      payload: {
        method: set_timer
        name: timer1
        data: '1617503208,1617503208,1617503208'
      }
    },
    return: {
      docs: [
        - schedat is int unix timestamp
        - period is int
        - duration is int
      ],
      payload: {
        schedat: 1617503208
        period: 1617503208
        duration: 1617503208
      }
    }
  }
}

func get_timer(json const char *, tokens jsmntok_t *, num_tokens int, retval char *) bool {
    return getset_timer(json, tokens, num_tokens, retval, false);
}

command get_timer {
  fn: get_timer,
  docs: {
    name: "get_timer",
    command: {
      docs: [
        - name is one of [{=# timers =}{= name =} {=/ timers =}]
      ],
      payload: {
        method: get_timer
        name: timer1
      }
    },
    return: {
      docs: [
        - schedat is int unix timestamp
        - period is int
        - duration is int
      ],
      payload: {
        schedat: 1617503208
        period: 1617503208
        duration: 1617503208
      }
    }
  }
}
{=/ has_timer =}

func swap_timer_event(delta_ms uint32_t) void {
    if (delta_ms <= get_cache_time_ms()) {
        return;
    }
    if (next_timer_event_ms > get_cache_time_ms()) {
        if (next_timer_event_ms > delta_ms) {
            next_timer_event_ms = delta_ms;
        }
    } else {
        next_timer_event_ms = delta_ms;
    }
}

func set_timer_raw(json const char *, tokens jsmntok_t *, num_tokens int, addr0 int, addr1 int, addr2 int) void {
    if (jsonlookup(json, tokens, num_tokens, {= FROM_ROM =}({= TO_ROM =}("data")), requestValue)) {
        int pos = 0;
        timer_schedat_s  = get_uint32_value(requestValue, &pos);
        timer_period_s   = get_uint32_value(requestValue, &pos);
        timer_duration_s = get_uint32_value(requestValue, &pos);

        if (timer_duration_s > {= MAX_TIMER_DURATION =}) {
            timer_duration_s = {= MAX_TIMER_DURATION =} - 100;
        }

        if (timer_period_s > {= MAX_TIMER_PERIOD =}) {
            timer_period_s = {= MAX_TIMER_PERIOD =} - 100;
        }

        {= STROAGE_PUT =}(addr0, timer_schedat_s);
        {= STROAGE_PUT =}(addr1, timer_period_s);
        {= STROAGE_PUT =}(addr2, timer_duration_s);
        {= STROAGE_COMMIT =}();
        swap_timer_event(get_cache_time_ms() + 5);
    }
}

func get_timer_raw(addr0 int, addr1 int, addr2 int, retval char *) bool {
    {= STROAGE_GET =}(addr0, timer_schedat_s);
    {= STROAGE_GET =}(addr1, timer_period_s);
    {= STROAGE_GET =}(addr2, timer_duration_s);
    sprintf(retval, {= FROM_ROM =}({= TO_ROM =}("{\"sched_at\": %ld, \"period\": %ld, \"duration\": %ld}")), timer_schedat_s, timer_period_s, timer_duration_s);
    return true;
}

func getset_timer(json const char *, tokens jsmntok_t *, num_tokens int, retval char *, set bool) bool {
    int token = jsonfind(json, tokens, num_tokens, "name");
    if (token > 1) {
        {=# timers =}
        if (jsoneq(json, &tokens[token], {= FROM_ROM =}({= TO_ROM =}("{= name =}")))) {
            if (set) {
                set_timer_raw(json, tokens, num_tokens, {= addr0 =}, {= addr1 =}, {= addr2 =});
            }
            return get_timer_raw({= addr0 =}, {= addr1 =}, {= addr2 =}, retval);
        }
        {=/ timers =}
    }
    return false;
}

func finishTimer(addr0 int, addr2 int, sched bool *) void {
    timer_delta1_ms = (timer_schedat_s - sys_timer_s + timer_duration_s) * 1000 + sys_timer_synced_ms;
    if (timer_delta1_ms <= get_cache_time_ms()) {
        if (*sched) {
            *sched = false;
            timer_action = 2;
        }
        if (timer_period_s > timer_duration_s && timer_period_s < {= MAX_TIMER_PERIOD =}) {
            timer_schedat_s += timer_period_s;
            {= STROAGE_PUT =}(addr0, timer_schedat_s);
            {= STROAGE_COMMIT =}();
            timer_delta0_ms = (timer_schedat_s - sys_timer_s) * 1000 + sys_timer_synced_ms;
        } else {
            stopTimer(addr2);
        }
    }
}

func startTimer(addr0 int, addr2 int, sched bool *) void {
    timer_delta1_ms = (timer_schedat_s + timer_duration_s - sys_timer_s) * 1000 + sys_timer_synced_ms;
    if (timer_delta1_ms > get_cache_time_ms()) {
        *sched = true;
        timer_action = 1;
    } else {
        finishTimer(addr0, addr2, sched);
    }
    return;
}

func stopTimer(addr2 int) void {
    {= STROAGE_PUT =}(addr2, 0);
    {= STROAGE_COMMIT =}();
}

func processTimer(addr0 int, addr1 int, addr2 int, sched bool *) void {
    processTimer0(addr0, addr1, addr2, sched);
    swap_timer_event(timer_delta0_ms);
    swap_timer_event(timer_delta1_ms);
}

func processTimer0(addr0 int, addr1 int, addr2 int, sched bool *) void {
    timer_action = 0;
    {= STROAGE_GET =}(addr0, timer_schedat_s);
    {= STROAGE_GET =}(addr1, timer_period_s);
    {= STROAGE_GET =}(addr2, timer_duration_s);

    if (*sched) {
        finishTimer(addr0, addr2, sched);
        return;
    }


    if (timer_duration_s == 0 || timer_duration_s > {= MAX_TIMER_DURATION =}) {
        return;
    }

    if (timer_schedat_s < sys_timer_s) {
        if (timer_schedat_s + timer_duration_s < sys_timer_s) {
            if (timer_period_s == 0 || timer_period_s > {= MAX_TIMER_PERIOD =}) {
                stopTimer(addr2);
                return;
            }
            for (int i = 0; i < 100000; i ++) {
                timer_schedat_s += timer_period_s;
                if (timer_schedat_s > sys_timer_s) {
                    break;
                }
            }
            if (timer_schedat_s < sys_timer_s) {
                stopTimer(addr2);
                return;
            } else {
                {= STROAGE_PUT =}(addr0, timer_schedat_s);
                {= STROAGE_COMMIT =}();
            }
        } else {
            startTimer(addr0, addr2, sched);
            return;
        }
    }

    timer_delta0_ms = (timer_schedat_s - sys_timer_s) * 1000 + sys_timer_synced_ms;

    if (timer_delta0_ms <= get_cache_time_ms()) {
        startTimer(addr0, addr2, sched);
    }
}
