{{={= =}=}}

// {
//     method: set_linkage,
//     name: linkage1
//     data: type,mode,min,max
// }
// {
//     method: get_linkage,
//     name: linkage1
// }

// @return
// {
//     type: int,
//     mode: int,
//     min: float,
//     max: float
// }

// linkage linkageName getSensorValue openFuncName closeFuncName


//  min_value        max_value
//  --------------------------
LINKAGE_MODE_NORMAL = 0

//            min_value    max_value
//  ----CLOSE----|-----OPEN----|----CLOSE----
//  -----left----|----right----|----left-----
LINKAGE_MODE_OPEN = 1

//           min_value     max_value
//  ----OPEN----|----CLOSE----|----OPEN----
//  ----left----|----right----|----left----
LINKAGE_MODE_CLOSE = 2

//           min_value     max_value
//  ----OPEN----|-------------|----CLOSE----
//  ----left----|-------------|----right----
LINKAGE_MODE_OPEN_CLOSE = 3

//            min_value     max_value
//  ----CLOSE----|-------------|----OPEN-----
//  -----left----|-------------|----right----
LINKAGE_MODE_CLOSE_OPEN = 4


//         value
// -------------|-----CLOSE-----
// -----left----|-----right-----
LINKAGE_MODE_DELAY_RIGHT_CLOSE = 5

//         value
// -------------|-----OPEN------
// -----left----|-----right-----
LINKAGE_MODE_DELAY_RIGHT_OPEN = 6

//         value
// ----CLOSE----|---------------
// -----left----|-----right-----
LINKAGE_MODE_DELAY_LEFT_CLOSE = 7

//         value
// -----OPEN----|---------------
// -----left----|-----right-----
LINKAGE_MODE_DELAY_LEFT_OPEN = 8

{=# linkages =}

linkage_{= name =}_type uint8_t = 0
linkage_{= name =}_mode uint8_t = 0;
linkage_{= name =}_min float = 0
linkage_{= name =}_max float = 0

setup setup_linkage_{= name =} {
    linkage_{= name =}_type = {= STROAGE_READ =}({= addr_type =});
    if (linkage_{= name =}_type > 32) {
        linkage_{= name =}_type = 0;
    }
    linkage_{= name =}_mode = {= STROAGE_READ =}({= addr_mode =});
    if (linkage_{= name =}_mode > 8) {
        linkage_{= name =}_mode = LINKAGE_MODE_NORMAL;
    }
    {= STROAGE_GET =}({= addr_min =}, linkage_{= name =}_min);
    {= STROAGE_GET =}({= addr_max =}, linkage_{= name =}_max);
}

func do_linkage_{= name =}_right() {
    if (linkage_{= name =}_mode == LINKAGE_MODE_OPEN) {
        {= open =}();
    }
    if (linkage_{= name =}_mode == LINKAGE_MODE_CLOSE) {
        {= close =}();
    }
    if (linkage_{= name =}_mode == LINKAGE_MODE_CLOSE_OPEN) {
        {= open =}();
    }
    if (linkage_{= name =}_mode == LINKAGE_MODE_OPEN_CLOSE) {
        {= close =}();
    }
}

func do_linkage_{= name =}_left() {
    if (linkage_{= name =}_mode == LINKAGE_MODE_OPEN) {
        {= close =}();
    }
    if (linkage_{= name =}_mode == LINKAGE_MODE_CLOSE) {
        {= open =}();
    }
    if (linkage_{= name =}_mode == LINKAGE_MODE_CLOSE_OPEN) {
        {= close =}();
    }
    if (linkage_{= name =}_mode == LINKAGE_MODE_OPEN_CLOSE) {
        {= open =}();
    }
}

func do_linkage_{= name =}_later() {
    if (linkage_{= name =}_mode == LINKAGE_MODE_DELAY_LEFT_CLOSE) {
        {= close =}();
    }
    if (linkage_{= name =}_mode == LINKAGE_MODE_DELAY_RIGHT_CLOSE) {
        {= close =}();
    }
    if (linkage_{= name =}_mode == LINKAGE_MODE_DELAY_LEFT_OPEN) {
        {= open =}();
    }
    if (linkage_{= name =}_mode == LINKAGE_MODE_DELAY_RIGHT_OPEN) {
        {= open =}();
    }
}

rule linkage_{= name =}_min <= {= get =}(linkage_{= name =}_type) && {= get =}(linkage_{= name =}_type) <= linkage_{= name =}_max
  do do_linkage_{= name =}_right
  else do_linkage_{= name =}_left
  on linkage_{= name =}_mode == LINKAGE_MODE_OPEN || linkage_{= name =}_mode == LINKAGE_MODE_CLOSE

rule linkage_{= name =}_min >= {= get =}(linkage_{= name =}_type)
  do do_linkage_{= name =}_left
  on linkage_{= name =}_mode == LINKAGE_MODE_CLOSE_OPEN || linkage_{= name =}_mode == LINKAGE_MODE_OPEN_CLOSE

rule linkage_{= name =}_max <= {= get =}(linkage_{= name =}_type)
  do do_linkage_{= name =}_right
  on linkage_{= name =}_mode == LINKAGE_MODE_CLOSE_OPEN || linkage_{= name =}_mode == LINKAGE_MODE_OPEN_CLOSE

rule linkage_{= name =}_min >= {= get =}(linkage_{= name =}_type)
  do later (linkage_{= name =}_max * 1000) do_linkage_{= name =}_later
  on linkage_{= name =}_mode == LINKAGE_MODE_DELAY_LEFT_OPEN || linkage_{= name =}_mode == LINKAGE_MODE_DELAY_LEFT_CLOSE

rule linkage_{= name =}_min <= {= get =}(linkage_{= name =}_type)
  do later (linkage_{= name =}_max * 1000) do_linkage_{= name =}_later
  on linkage_{= name =}_mode == LINKAGE_MODE_DELAY_RIGHT_OPEN || linkage_{= name =}_mode == LINKAGE_MODE_DELAY_RIGHT_CLOSE


{=/ linkages =}


func set_linkage_raw(json const char *, tokens jsmntok_t *, num_tokens int, type uint8_t *, mode uint8_t *, min float *, max float *, addr0 int, addr1 int, addr2 int, addr3 int) void {
    if (jsonlookup(json, tokens, num_tokens, {= FROM_ROM =}({= TO_ROM =}("data")), requestValue)) {
        int pos = 0;
        *type  = (uint8_t)get_uint32_value(requestValue, &pos);
        *mode   = (uint8_t)get_uint32_value(requestValue, &pos);
        *min   = get_float_value(requestValue, &pos);
        *max   = get_float_value(requestValue, &pos);

        {= STROAGE_PUT =}(addr0, *type);
        {= STROAGE_PUT =}(addr1, *mode);
        {= STROAGE_PUT =}(addr2, *min);
        {= STROAGE_PUT =}(addr3, *max);
        {= STROAGE_COMMIT =}();
    }
}

func get_linkage_raw(type uint8_t, mode uint8_t, min float, max float, retval char *) bool {
    dtostrf(min, 5, 4, value_buf0);
    dtostrf(max, 5, 4, value_buf1);
    sprintf(retval, {= FROM_ROM =}({= TO_ROM =}("{\"type\": %d, \"mode\": %d, \"min\": %s, \"max\": %s}")), type, mode, ltrim(value_buf0), ltrim(value_buf1));
    return true;
}

func getset_linkage(json const char *, tokens jsmntok_t *, num_tokens int, retval char *, set bool) bool {
    int token = jsonfind(json, tokens, num_tokens, "name");
    if (token > 1) {
        {=# linkages =}
        if (jsoneq(json, &tokens[token], {= FROM_ROM =}({= TO_ROM =}("{= name =}")))) {
            if (set) {
                set_linkage_raw(json, tokens, num_tokens, &linkage_{= name =}_type, &linkage_{= name =}_mode, &linkage_{= name =}_min, &linkage_{= name =}_max, {= addr_type =}, {= addr_mode =}, {= addr_min =}, {= addr_max =});
            }
            return get_linkage_raw(linkage_{= name =}_type, linkage_{= name =}_mode, linkage_{= name =}_min, linkage_{= name =}_max, retval);
        }
        {=/ linkages =}
    }
    return false;
}

{=# has_linkage =}
func set_linkage(json const char *, tokens jsmntok_t *, num_tokens int, retval char *) bool {
    return getset_linkage(json, tokens, num_tokens, retval, true);
}

command set_linkage {
  fn: set_linkage,
  docs: {
    name: "set_linkage",
    command: {
      docs: [
        - name is one of [{=# linkages =}{= name =} {=/ linkages =}]
        - data format is type,mode,min,max
        - type is int between [0, 32]
        - mode is int between [0, 8]
        - mode == 0 is mean 无|无|无,
        - mode == 1 is mean 关|开|关,
        - mode == 2 is mean 开|关|开,
        - mode == 3 is mean 开|无|关,
        - mode == 4 is mean 关|无|开,
        - mode == 5 is mean 无|延时关,
        - mode == 6 is mean 无|延时开,
        - mode == 7 is mean 延时关|无,
        - mode == 8 is mean 延时开|无,
        - min is float prec 5 when mode > 5 min is value
        - max is float prec 5 when mode > 5 max is later
       ],
      payload: {
        method: set_linkage,
        name: linkage1
        data: '32,4,-99999.9999,99999.9999'
      }
    },
    return: {
      docs: [
        - type is int between [0, 32]
        - mode is int between [0, 8]
        - mode == 0 is mean 无|无|无,
        - mode == 1 is mean 关|开|关,
        - mode == 2 is mean 开|关|开,
        - mode == 3 is mean 开|无|关,
        - mode == 4 is mean 关|无|开,
        - mode == 5 is mean 无|延时关,
        - mode == 6 is mean 无|延时开,
        - mode == 7 is mean 延时关|无,
        - mode == 8 is mean 延时开|无,
        - min is float prec 5 when mode > 5 min is value
        - max is float prec 5 when mode > 5 max is later
       ],
      payload: {
        type: 32
        mode: 4
        min: -99999.9999
        max: 99999.9999
      }
    }
  }
}

func get_linkage(json const char *, tokens jsmntok_t *, num_tokens int, retval char *) bool {
    return getset_linkage(json, tokens, num_tokens, retval, false);
}

command get_linkage {
  fn: get_linkage,
  docs: {
    name: "get_linkage",
    command: {
      docs: [
        - name is one of [{=# linkages =}{= name =} {=/ linkages =}]
       ],
      payload: {
        method: get_linkage,
        name: linkage1
      }
    },
    return: {
      docs: [
        - type is int between [0, 32]
        - mode is int between [0, 8]
        - mode == 0 is mean 无|无|无,
        - mode == 1 is mean 关|开|关,
        - mode == 2 is mean 开|关|开,
        - mode == 3 is mean 开|无|关,
        - mode == 4 is mean 关|无|开,
        - mode == 5 is mean 无|延时关,
        - mode == 6 is mean 无|延时开,
        - mode == 7 is mean 延时关|无,
        - mode == 8 is mean 延时开|无,
        - min is float prec 5 when mode > 5 min is value
        - max is float prec 5 when mode > 5 max is later
       ],
      payload: {
        type: 32
        mode: 4
        min: -99999.9999
        max: 99999.9999
      }
    }
  }
}
{=/ has_linkage =}
