app stm8 {
  key: "bdde6db9f3daf38f3a",
  token: "14b61d617a9c428a95542dbd097d7a0e"
}

GL_SERIAL = Serial
GL_SERIAL_begin = Serial_begin
GL_SERIAL_read = Serial_read
GL_SERIAL_available = Serial_available
GL_SERIAL_write = Serial_write
GL_SERIAL_flush = Serial_flush
METRIC_DELAY_MS = attr_delay
PING_FAILED_CB = noop

func isdigit(v char) bool {
    return v >= '0' && v <= '9';
}

setup gl_serial_step {
    GL_SERIAL_begin(115200);
    while (!GL_SERIAL) {;}
}

attr delay {
  type: unsigned long,
  default: 1800,
  min: 60,
  max: 86400,
  scale: 1000
}

metric temperature {
  type: float,
  max: 100,
  min: 0,
  threshold: 1,
  prec: 2
}

func read_stm8 {
    metric_temperature += 0.1;
    if (metric_temperature > 100) {
         metric_temperature = 0;
    }
}

every read_stm8 6000

attr relay_state {
  type: uint8_t,
  default: 0,
  min: 0,
  max: 1,
  gen_set: false,
  keep: false
}

func try_set_attr_relay_state bool {
    if (attr_relay_mode == 1) {
        return set_attr_relay_state(json, tokens, num_tokens, retval);
    }
    return true;
}

command set_relay_state {
    fn: try_set_attr_relay_state,
    error: "only relay_mode is 1 can set this value",
    docs: {
        name: "Edit attribute relay_state",
        command: {
            docs: [
                 - data is between [0, 1]
             ],
            payload: {
                method: set_relay_state,
                data: 0
            }
        },
        return: {
            docs: [
                 - relay_state is between [0, 1]
             ],
            payload: {
                relay_state: 0
            }
        },
        error: {
            payload: {
                err: data must between [0, 1]
            }
        }
    }
}

// relay_mode 1 manual mode
//            0 auto mode
attr relay_mode {
  type: uint8_t,
  default: 0,
  min: 0,
  max: 1
}

func try_toggle_gpio_relay {
    if (attr_relay_mode == 1) {
        toggle_gpio_relay();
    }
}

gpio relay_mode LED_BUILTIN -> link relay_mode
gpio relay 12 -> link relay_state
gpio btn0 11 HIGH -> click try_toggle_gpio_relay
gpio btn1 10 HIGH -> click toggle_gpio_relay_mode

attr high_temperature {
  type: float,
  default: 30,
  min: 0,
  max: 100
}

attr low_temperature {
  type: float,
  default: 20,
  min: 0,
  max: 100
}

attr open_delay {
  type: unsigned long,
  default: 5,
  min: 0,
  max: 3600,
  scale: 1000
}

attr close_delay {
  type: unsigned long,
  default: 5,
  min: 0,
  max: 3600,
  scale: 1000
}
rule metric_temperature < attr_high_temperature && metric_temperature > attr_low_temperature
    do later attr_open_delay open_gpio_relay
    else later attr_close_delay close_gpio_relay
    on attr_relay_mode == 0

can_emit_givelink_unauth bool = false

func emit_givelink_unauth {
    if (can_emit_givelink_unauth) {
        can_emit_givelink_unauth = false;
        givelink_context_set_auth(false);
    }
}

func allow_emit_givelink_unauth {
    can_emit_givelink_unauth = true;
}

gpio auth 9 LOW -> click noop

rule gpio_auth_state == HIGH
    do later 2000 emit_givelink_unauth
    else allow_emit_givelink_unauth
    on givelink_context_authed()
