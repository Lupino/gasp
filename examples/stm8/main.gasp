app stm8 {
  key: "bdde6db9f3daf38f3a",
  token: "14b61d617a9c428a95542dbd097d7a0e"
}

init do
#define GL_SERIAL Serial
#define GL_SERIAL_begin Serial_begin
#define GL_SERIAL_read Serial_read
#define GL_SERIAL_available Serial_available
#define GL_SERIAL_write Serial_write
#define METRIC_DELAY_MS attr_delay
#define PING_FAILED_CB noop
done

setup do
    GL_SERIAL_begin(115200);
    while (!GL_SERIAL) {;}
done

attr delay {
  type: "unsigned long",
  default: 1800,
  min: 60,
  max: 86400,
  scale: 1000
}

metric temperature {
  type: "float",
  max: 100,
  min: 0,
  threshold: 1,
  prec: 2
}

func read_stm8 do
    metric_temperature += 0.1;
    if (metric_temperature > 100) {
         metric_temperature = 0;
    }
done

every read_stm8 6000

attr relay_state {
  type: "int",
  default: 0,
  min: 0,
  max: 1,
  gen_set: false,
  keep: false
}

func try_set_attr_relay_state do
    if (attr_relay_mode == 1) {
        return set_attr_relay_state(json, tokens, num_tokens, retval);
    }
    return RET_ERR;
done

command set_relay_state {
    fn: try_set_attr_relay_state,
    error: "only relay_mode is 1 can set this value",
    doc: do
### Edit attribute relay_state

@Command:

```json
{
    "method": "set_relay_state",
    "data": 0
}
```

- data is between [0, 1]

@Return:

```json
{
    "relay_state": 0
}
```

- relay_state is between [0, 1]

@Error:

```json
{
    "err": "data must between: [0, 1]"
}
```
done
}

attr relay_mode {
  type: "int",
  default: 0,
  min: 0,
  max: 1
}

func try_toggle_gpio_relay do
    if (attr_relay_mode == 1) {
        toggle_gpio_relay();
    }
done

gpio relay_mode LED_BUILTIN -> link relay_mode
gpio relay 12 -> link relay_state
gpio btn0 11 HIGH -> click try_toggle_gpio_relay
gpio btn1 10 HIGH -> click toggle_gpio_relay_mode

attr high_temperature {
  type: "float",
  default: 30,
  min: 0,
  max: 100
}

attr low_temperature {
  type: "float",
  default: 20,
  min: 0,
  max: 100
}
rule metric_temperature < attr_high_temperature && metric_temperature > attr_low_temperature && attr_relay_mode == 1 do open_gpio_relay else close_gpio_relay
