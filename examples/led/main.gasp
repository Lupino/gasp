app led {
  key: "bdde6db9f3daf38f3a",
  token: "14b61d617a9c428a95542dbd097d7a0e"
}

init do
#define GL_SERIAL Serial
#define DEBUG_SERIAL Serial
done

setup do
    GL_SERIAL.begin(115200);
    while (!GL_SERIAL) {;}
done

attr led_state {
  type: "int",
  max: 1,
  min: 0,
  gen_set: false
}

func toggle_led do
    toggle_gpio_blinker();
    get_attr_led_state(retval);
done


func open_led do
    attr_led_state = HIGH;
    get_attr_led_state(retval);
done


func close_led do
    attr_led_state = LOW;
    get_attr_led_state(retval);
done

command toggle {
  fn: toggle_led,
  doc: do
### Toggle led

@Command:

```
{
    "method": "toggle"
}
```

@Return:

```
{
    "led_state": 0
}
```
done
}

command open {
  fn: open_led,
  doc: do
### Open led

@Command:

```
{
    "method": "open"
}
```

@Return:

```
{
    "led_state": 1
}
```
done
}

command close {
  fn: close_led,
  doc: do
### Close led

@Command:

```
{
    "method": "close"
}
```

@Return:

```
{
    "led_state": 0
}
```
done
}

gpio blinker LED_BUILTIN -> link led_state

gpio button 12 HIGH -> click toggle_gpio_blinker
