app led {
  key: "bdde6db9f3daf38f3a",
  token: "14b61d617a9c428a95542dbd097d7a0e"
}

GL_SERIAL = Serial
DEBUG_SERIAL = Serial

setup {
    GL_SERIAL.begin(115200);
    while (!GL_SERIAL) {;}
}

attr led_state {
  type: uint8_t,
  max: 1,
  min: 0,
  gen_set: false
}

func toggle_led {
    toggle_gpio_blinker();
    get_attr_led_state(retval);
}


func open_led {
    attr_led_state = HIGH;
    get_attr_led_state(retval);
}


func close_led {
    attr_led_state = LOW;
    get_attr_led_state(retval);
}

command toggle {
  fn: toggle_led,
  docs: {
    name: "Toggle Led",
    command: {
      payload: {
        method: toggle
      }
    },
    return: {
      docs: [
        - led_state is between [0, 1]
      ],
      payload: {
        led_state: 1
      }
    }
  }
}

command open {
  fn: open_led,
  docs: {
    name: "Open Led",
    command: {
      payload: {
        method: open
      }
    },
    return: {
      docs: [
        - led_state is between [0, 1]
      ],
      payload: {
        led_state: 1
      }
    }
  }
}

command close {
  fn: close_led,
  docs: {
    name: "Close Led",
    command: {
      payload: {
        method: close
      }
    },
    return: {
      docs: [
        - led_state is between [0, 1]
      ],
      payload: {
        led_state: 0
      }
    }
  }
}

gpio blinker LED_BUILTIN -> link led_state

gpio button 12 HIGH -> click toggle_gpio_blinker
